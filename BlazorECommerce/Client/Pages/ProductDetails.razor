@page "/product/{id:int}"
@inject IProductServices _services
@inject ICardService _cartService
@if (product == null)
{
    <span>@message</span>
}
else
{
    <div class="media">
        <div class="media-img-wrapper mr-2">
            <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
        </div>
        <div class="media-body">
            <h2 class="mb-0">@product.Title</h2>
            @if(product.ProductVariants != null && product.ProductVariants.Count >1)
            {
                <div class="mb-3">
                    <select class="form-select" @bind="currentTypeId">
                        @foreach (var variant in product.ProductVariants)
                       {
                           <option value="@variant.ProductTypeId">
                               @variant.ProductType.Name
                           </option>
                       }
                    </select>
                </div>
            }
            <p>@product.Description</p>
            @if (GetSelectedVariant() != null)
           {
               @if (GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
               {
                   <h6 class="text-muted original-price">
                       @GetSelectedVariant().OriginalPrice
                   </h6>
               }
                <h4 class="price">
                    $@GetSelectedVariant().Price
                </h4>
            }
            <button class="btn btn-primary" @onclick="AddToCart">
                <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Add to Cart
            </button>
        </div>
    </div>
}

@code {
    private Product? product = null;
    private string message = "Loading details..";
    private int currentTypeId = 1;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var result = await _services.GetProductById(Id);

        if (!result.Success)
        {
            message = "Error while loading the product";
        }
        else
        {
            product = result.Data;
            if (product.ProductVariants.Count > 0)
            {
                currentTypeId = product.ProductVariants[0].ProductTypeId;
            }
        }

    }
    private ProductVariant GetSelectedVariant()
    {
        var productVariant = product.ProductVariants.FirstOrDefault(p => p.ProductTypeId == currentTypeId);
        return productVariant;
    }

    private async Task AddToCart()
    {
        var variants = GetSelectedVariant();
        var cartItem = new CardItem()
            {
                ProductId = variants.ProductId,
                ProductTypeId = variants.ProductTypeId,
            };
        await _cartService.AddToCart(cartItem);
    }
}
