@page "/login"
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ICardService CartService
@using BlazorEcommerce.Shared
@using Microsoft.AspNetCore.WebUtilities

<PageTitle>Login</PageTitle>

<EditForm Model="userLogin" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="userLogin.Email" class="form-control" />
        <ValidationMessage For="@(() => userLogin.Email)" />
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="userLogin.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => userLogin.Password)" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>
<div class="text-danger">
    <span>@errorMessage</span>
</div>

@code {
    UserLogin userLogin = new UserLogin();
    string errorMessage = string.Empty;
    string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }


    private async Task HandleLogin()
    {
        var result = await AuthService.Login(userLogin);
        if (result.Success)
        {
            errorMessage = string.Empty;
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthStateProvider.GetAuthenticationStateAsync();
            await CartService.StoreCartItems(true);
            NavigationManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }
    }
}
